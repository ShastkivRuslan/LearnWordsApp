package com.example.learnwordstrainer.utils;

import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;

import androidx.core.app.NotificationCompat;
import androidx.core.app.NotificationManagerCompat;

import com.example.learnwordstrainer.R;
import com.example.learnwordstrainer.ui.activities.MainActivity;
import com.example.learnwordstrainer.ui.activities.RepetitionActivity;
import com.example.learnwordstrainer.ui.activities.PracticeActivity;

import java.util.Random;

/**
 * Helper class for creating and managing notifications
 */
public class NotificationHelper {
    private static final String CHANNEL_ID = "learning_reminders";
    private static final String CHANNEL_NAME = "–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –Ω–∞–≤—á–∞–Ω–Ω—è";
    private static final String CHANNEL_DESCRIPTION = "–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –≤–∏–≤—á–µ–Ω–Ω—è —Å–ª—ñ–≤";
    private static final int NOTIFICATION_ID = 1001;

    private static final String[] NOTIFICATION_TITLES = {
            "–ß–∞—Å –≤–∏–≤—á–∞—Ç–∏ —Å–ª–æ–≤–∞! üìö",
            "–ù–µ –∑–∞–±—É–≤–∞–π—Ç–µ –ø—Ä–æ –Ω–∞–≤—á–∞–Ω–Ω—è! üéØ",
            "–•–≤–∏–ª–∏–Ω–∫–∞ –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è —Å–ª—ñ–≤ üí°",
            "–î–∞–≤–∞–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏–º–æ —Å–ª–æ–≤–∞! üîÑ",
            "–ß–∞—Å –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏! ‚≠ê"
    };

    private static final String[] NOTIFICATION_MESSAGES = {
            "–ü–æ–≤—Ç–æ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫–∞ —Å–ª—ñ–≤, —â–æ–± –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —Å–ª–æ–≤–Ω–∏–∫–æ–≤–∏–π –∑–∞–ø–∞—Å",
            "–ù–∞–≤—ñ—Ç—å 5 —Ö–≤–∏–ª–∏–Ω –Ω–∞–≤—á–∞–Ω–Ω—è –ø—Ä–∏–Ω–µ—Å—É—Ç—å –∫–æ—Ä–∏—Å—Ç—å",
            "–ß–∞—Å –∑–∞–∫—Ä—ñ–ø–∏—Ç–∏ –∑–Ω–∞–Ω–Ω—è! –ü–æ–≤—Ç–æ—Ä—ñ—Ç—å –≤–∏–≤—á–µ–Ω—ñ —Å–ª–æ–≤–∞",
            "–ü—Ä–∞–∫—Ç–∏–∫–∞ - –∫–ª—é—á –¥–æ —É—Å–ø—ñ—Ö—É. –í—ñ–¥–∫—Ä–∏–π—Ç–µ –¥–æ–¥–∞—Ç–æ–∫!",
            "–í–∞—à—ñ —Å–ª–æ–≤–∞ —á–µ–∫–∞—é—Ç—å –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è"
    };

    /**
     * Create notification channel for Android 8.0 and above
     */
    public static void createNotificationChannel(Context context) {
        NotificationChannel channel = new NotificationChannel(
                CHANNEL_ID,
                CHANNEL_NAME,
                NotificationManager.IMPORTANCE_LOW // –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞ LOW —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∑–≤—É–∫—ñ–≤
        );
        channel.setDescription(CHANNEL_DESCRIPTION);
        channel.enableVibration(false); // –í–∏–º–∫–Ω–µ–Ω–æ –≤—ñ–±—Ä–∞—Ü—ñ—é
        channel.enableLights(true); // –¢—ñ–ª—å–∫–∏ —Å–≤—ñ—Ç–ª–æ
        channel.setSound(null, null); // –í–∏–º–∫–Ω–µ–Ω–æ –∑–≤—É–∫

        NotificationManager notificationManager = context.getSystemService(NotificationManager.class);
        if (notificationManager != null) {
            notificationManager.createNotificationChannel(channel);
        }
    }

    /**
     * Show learning reminder notification
     */
    public static void showLearningReminder(Context context) {
        createNotificationChannel(context);

        Random random = new Random();
        String title = NOTIFICATION_TITLES[random.nextInt(NOTIFICATION_TITLES.length)];
        String message = NOTIFICATION_MESSAGES[random.nextInt(NOTIFICATION_MESSAGES.length)];

        // Create intent for main activity
        Intent mainIntent = new Intent(context, MainActivity.class);
        mainIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);
        PendingIntent mainPendingIntent = PendingIntent.getActivity(
                context, 0, mainIntent,
                PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE
        );

        // Create intent for repetition activity
        Intent repetitionIntent = new Intent(context, RepetitionActivity.class);
        repetitionIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);
        PendingIntent repetitionPendingIntent = PendingIntent.getActivity(
                context, 1, repetitionIntent,
                PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE
        );

        // Create intent for practice activity
        Intent practiceIntent = new Intent(context, PracticeActivity.class);
        practiceIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);
        PendingIntent practicePendingIntent = PendingIntent.getActivity(
                context, 2, practiceIntent,
                PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE
        );

        // Build notification
        NotificationCompat.Builder builder = new NotificationCompat.Builder(context, CHANNEL_ID)
                .setSmallIcon(R.drawable.ic_notification) // You'll need to add this icon
                .setContentTitle(title)
                .setContentText(message)
                .setStyle(new NotificationCompat.BigTextStyle().bigText(message))
                .setPriority(NotificationCompat.PRIORITY_LOW) // –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞ LOW
                .setContentIntent(mainPendingIntent)
                .setAutoCancel(true)
                .setDefaults(0) // –í–∏–º–∫–Ω–µ–Ω–æ –≤—Å—ñ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
                .setSound(null) // –Ø–≤–Ω–æ –±–µ–∑ –∑–≤—É–∫—É
                .setVibrate(new long[]{0}) // –Ø–≤–Ω–æ –±–µ–∑ –≤—ñ–±—Ä–∞—Ü—ñ—ó
                .setOnlyAlertOnce(true) // –ù–µ –¥–∑–≤–æ–Ω–∏—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ
                .addAction(R.drawable.ic_repetition, "–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏", repetitionPendingIntent)
                .addAction(R.drawable.ic_practice, "–ü—Ä–∞–∫—Ç–∏–∫–∞", practicePendingIntent);

        // Show notification
        NotificationManagerCompat notificationManager = NotificationManagerCompat.from(context);
        try {
            notificationManager.notify(NOTIFICATION_ID, builder.build());
        } catch (SecurityException e) {
            // Handle case where notification permission is not granted
            e.printStackTrace();
        }
    }

    /**
     * Cancel all notifications
     */
    public static void cancelAllNotifications(Context context) {
        NotificationManagerCompat notificationManager = NotificationManagerCompat.from(context);
        notificationManager.cancel(NOTIFICATION_ID);
    }

    /**
     * Check if notifications are enabled
     */
    public static boolean areNotificationsEnabled(Context context) {
        NotificationManagerCompat notificationManager = NotificationManagerCompat.from(context);
        return notificationManager.areNotificationsEnabled();
    }
}